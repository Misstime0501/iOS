//
//  main.swift
//  Operator
//
//  Created by LiChen on 5/21/16.
//  Copyright © 2016 LiChen. All rights reserved.
//

import Foundation

/****************************************************************/
/*************************** 赋值运算符 ***************************/
/****************************************************************/
var x = 3
var y = 4

var a : Int
// Swift 赋值表达式是没有值的，不支持连续赋值
//var b = a = 20

/****************************************************************/
/*************************** 算数运算符 ***************************/
/****************************************************************/
// 整形 除法 4
var c = 19 / 4
//print(c)

// 浮点数 除法  2.08333333
var d = 2.5 / 1.2
// inf 无穷大
var f = 4.3 / 0.0

// 求余运算
var g = 5.2
var h = -3.1
// 结果取决于被除数 即 % 前面的数
var mod = g % h
//print(mod)


//var i = 5
//var j = i++ + 6
//print(j);
//
//var k = ++a + 6
//print(k);

/****************************************************************/
/*************************** 溢出运算符 ***************************/
/****************************************************************/
// &- &+ &* &/ &% 二进制方式进行运算的
// Uint8 的最小值是 0
var willUnderflow = UInt8.min
// 下面这种算法会溢出，使程序出错
//willUnderflow = willUnderflow - 1
willUnderflow = willUnderflow &- 1
print(willUnderflow)

let l = 20
//let m = l &/ 0
//let n = a &% 0

/****************************************************************/
/**************************** 位运算符 ***************************/
/****************************************************************/
/**
 *  &   按位与
 *  |   或
 *  ^   异或
 *  ~   取反
 *  <<  左位移
 *  >>  右位移
 */

// 扩展后的赋值运算符
/**
 *  +=   对于 x += y 相当于 x = x + y
 *  -=
 *  *=
 *  /=
 *  &=
 *  |=
 */

/****************************************************************/
/*************************** 区间运算符 ***************************/
/****************************************************************/
// a..<b (包含 a 但不包含 b)   a...b (包含 a 也包含 b)
for o in 0..<10
{
    
}

for p in 0...10
{
    
}

/****************************************************************/
/*************************** 比较运算符 ***************************/
/****************************************************************/
// 即 < 、<= 、> 、>= 、== 、!= 等
// === 特征相等运算符      !== 特征不等运算符
//var r = s === t    只有 s 和 t 指向的类型实例相同时， r 为 true


/****************************************************************/
/*************************** 逻辑运算符 ***************************/
/****************************************************************/
/**
 *  &&      与
 *  ||      或
 *  !       非
 */

/****************************************************************/
/*************************** 三目运算符 ***************************/
/****************************************************************/
//   可以嵌套
var u = 5
var v = 3
var str = u > v ? "u 大于 v" : "u 小于 v"

/****************************************************************/
/************************** 空合并运算符 **************************/
/****************************************************************/
// a ？？ b 将对可选类型 a 进行 nil 的判断，如果 a 包含一个值就进行解封 输出 a
// 否则就返回一个默认值 b
let words = "hello"
var say : String?
var content = say ?? words
print(content)




